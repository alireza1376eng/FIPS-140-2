% Logistic Map Chaotic Sequence Generation with FIPS 140-2 Tests

clc
clear all

% Import Near and Far generated key 
load('preliminary_KEY_BOB_N.mat')
preliminary_KEY_BOB_N = preliminary_KEY_BOB_N(170, 1:1:20000);

% Parameters
n = 20000; % Number of iterations
x0 = 0.0001; % Initial condition
r = 3.9; % Control parameter (3.57 < r <= 4 for chaos)

% Preallocate array for the chaotic sequence
chaotic_sequence = zeros(1, n);

% Set the initial value of the sequence
chaotic_sequence(1) = x0;

% Iterate the Logistic map
for i = 2:n
    chaotic_sequence(i) = r * chaotic_sequence(i-1) * (1 - chaotic_sequence(i-1));
end

% Compute the mean of the chaotic sequence
sequence_mean = mean(chaotic_sequence);

% Binary quantization based on the mean
binary_sequence = chaotic_sequence > sequence_mean;

% XOR chaotic sequence with one of generated keys
binary_sequence = xor(binary_sequence, preliminary_KEY_BOB_N);

% FIPS 140-2 Tests
% Monobit Test
num_ones = sum(binary_sequence);
num_zeros = n - num_ones;
monobit_result = (num_ones > 0.4 * n) && (num_ones < 0.6 * n);

% Poker Test
m = 4; % Block size
num_blocks = floor(n / m);
blocks = reshape(binary_sequence(1:num_blocks * m), m, num_blocks)';
block_values = bi2de(blocks, 'left-msb');
counts = histcounts(block_values, 0:2^m);
poker_stat = (sum(counts.^2) * (2^m) / num_blocks - num_blocks) / (2^m);
poker_result = (poker_stat > 1.03 && poker_stat < 57.4);

% Runs Test
runs = diff([0, binary_sequence, 0]);
run_lengths = diff(find(runs));
run_counts = histcounts(run_lengths, 1:max(run_lengths)+1);
expected_runs = [num_zeros, num_ones] / sum([num_zeros, num_ones]) * sum(run_counts);
runs_result = all(abs(run_counts(1:min(length(expected_runs), length(run_counts))) - ...
    expected_runs(1:min(length(expected_runs), length(run_counts)))) < 5);

% Long Runs Test
long_runs_result = max(run_lengths) <= 34;

% Display Results
fprintf('FIPS 140-2 Test Results:\n');
fprintf('Monobit Test: %s (Num Ones: %d, Num Zeros: %d)\n', string(monobit_result), num_ones, num_zeros);
fprintf('Poker Test: %s (Poker Statistic: %.4f)\n', string(poker_result), poker_stat);
fprintf('Runs Test: %s\n', string(runs_result));
if runs_result
    fprintf('Run Counts: %s\n', mat2str(run_counts));
else
    fprintf('Expected Runs: %s\nActual Runs: %s\n', mat2str(expected_runs), mat2str(run_counts));
end
fprintf('Long Runs Test: %s (Max Run Length: %d)\n', string(long_runs_result), max(run_lengths));

% Plot the chaotic sequence
figure;
subplot(2, 1, 1);
plot(chaotic_sequence, '-b');
xlabel('Iteration');
ylabel('Value');
title('Chaotic Sequence Generated by Logistic Map');
grid on;

% Plot the binary quantized sequence
subplot(2, 1, 2);
stem(binary_sequence, '-r');
xlabel('Iteration');
ylabel('Binary Value');
title('Binary Quantized Sequence');
grid on;
